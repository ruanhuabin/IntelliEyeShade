package serviceimpl;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

import db.MyHibernateSessionFactory;
import entity.Student;

import service.UsersDAO;

public class UsersDAOImpl implements UsersDAO {

	@Override
	public List<Users> queryAllStudents() {
		// TODO Auto-generated method stub
		
		Transaction tx = null;
		List<Student> list = null;
		String hql = "";
		
		try{
			
			Session session = MyHibernateSessionFactory.getSessionFactory().getCurrentSession();
			tx = session.beginTransaction();
			hql = "from Student";
			
			Query query = session.createQuery(hql);
			list = query.list();
			tx.commit();
			
			return list;
			
			
			
		}catch(Exception ex)
		{
			ex.printStackTrace();
			tx.commit();
			return list;
			
		}
		finally
		{
			if(tx != null)
			{
				
				tx = null;
			}
		}
		
		
	}

	@Override
	public Student queryStudentBySid(String sid) {
		// TODO Auto-generated method stub
		
		Transaction tx = null;
		List<Student> list = null;
		String hql = "";
		Student s = null;
		
		try{
			
			Session session = MyHibernateSessionFactory.getSessionFactory().getCurrentSession();
			tx = session.beginTransaction();
			
			s = (Student) session.get(Student.class, sid);
			
			tx.commit();
			
			return s;
			
			
			
		}catch(Exception ex)
		{
			ex.printStackTrace();
			tx.commit();
			return s;
			
		}
		finally
		{
			if(tx != null)
			{
				
				tx = null;
			}
		}
		
	}

	@Override
	public boolean addStudents(Student s) {
		// TODO Auto-generated method stub
		
		s.setSid(getStuID());
		Transaction tx = null;
		
		String hql = "";
		try{
			Session session = MyHibernateSessionFactory.getSessionFactory().getCurrentSession();
			tx = session.beginTransaction();
			
			session.save(s);
			
			tx.commit();
			
			return true;
			
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
			tx.commit();
			return false;
			
		}
		
		finally
		{
			if(tx != null)
			{
				tx = null;
			}
		}
		
		
		
	}

	@Override
	public boolean updateStudents(Student s) {
		// TODO Auto-generated method stub\
		
		Transaction tx = null;
		
		String hql = "";
		try{
			Session session = MyHibernateSessionFactory.getSessionFactory().getCurrentSession();
			tx = session.beginTransaction();
			
			session.update(s);
			
			tx.commit();
			
			return true;
			
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
			tx.commit();
			return false;
			
		}
		
		finally
		{
			if(tx != null)
			{
				tx = null;
			}
		}
	
		
	}

	@Override
	public boolean deleteStudent(String sid) {
		// TODO Auto-generated method stub
		
		Transaction tx = null;
		
		String hql = "";
		try{
			Session session = MyHibernateSessionFactory.getSessionFactory().getCurrentSession();
			tx = session.beginTransaction();
			
			Student s = (Student)session.get(Student.class, sid);
			session.delete(s);
			
			tx.commit();
			
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
			tx.commit();
			return false;
			
		}
		
		finally
		{
			if(tx != null)
			{
				tx = null;
			}
		}
		return false;
	}
	
	public String getStuID()
	{
		
		Transaction tx = null;
		String hql = "";
		String sid = null;
		try{
			
			Session session = MyHibernateSessionFactory.getSessionFactory().getCurrentSession();
			tx = session.beginTransaction();
			//From 后面的名字 是hbm.xml中table属性所指定的名字
			hql = "select max(sid) from Student";
			//hql = "from Student";
			
			Query query = session.createQuery(hql);
			
			sid = (String)query.uniqueResult();
			//sid = ((Student)query.list().get(2)).getSid();
			
			if(sid == null || "".equals(sid))
			{
				
				sid = "S0000001";
			}
			else
			{
				String temp = sid.substring(1);
				int i = Integer.parseInt(temp);
				i ++;
				
				temp = String.valueOf(i);
				
				int len = temp.length();
				
				for(int j = 0; j < 6 - len; j ++)
				{
					temp = "0" + temp;
				}
				
				sid = "S" + temp;
			}
			
			tx.commit();
			return sid;
			
			
			
			
		}
		catch(Exception ex)
		{
			
			ex.printStackTrace();
			tx.commit();
			return null;
		}
		finally{
			
			
		}
	}

}
